#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Task_Tracker
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="TaskTracker")]
	public partial class TaskTrackerDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertClient(Client instance);
    partial void UpdateClient(Client instance);
    partial void DeleteClient(Client instance);
    partial void InsertDeveloperIterationTask(DeveloperIterationTask instance);
    partial void UpdateDeveloperIterationTask(DeveloperIterationTask instance);
    partial void DeleteDeveloperIterationTask(DeveloperIterationTask instance);
    partial void InsertDeveloper(Developer instance);
    partial void UpdateDeveloper(Developer instance);
    partial void DeleteDeveloper(Developer instance);
    partial void InsertIterationTask(IterationTask instance);
    partial void UpdateIterationTask(IterationTask instance);
    partial void DeleteIterationTask(IterationTask instance);
    partial void InsertProject(Project instance);
    partial void UpdateProject(Project instance);
    partial void DeleteProject(Project instance);
    partial void InsertTask(Task instance);
    partial void UpdateTask(Task instance);
    partial void DeleteTask(Task instance);
    partial void InsertIteration(Iteration instance);
    partial void UpdateIteration(Iteration instance);
    partial void DeleteIteration(Iteration instance);
    #endregion
		
		public TaskTrackerDataContext() : 
				base(global::Task_Tracker.Properties.Settings.Default.TaskTrackerConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public TaskTrackerDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TaskTrackerDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TaskTrackerDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TaskTrackerDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Client> Clients
		{
			get
			{
				return this.GetTable<Client>();
			}
		}
		
		public System.Data.Linq.Table<DeveloperIterationTask> DeveloperIterationTasks
		{
			get
			{
				return this.GetTable<DeveloperIterationTask>();
			}
		}
		
		public System.Data.Linq.Table<Developer> Developers
		{
			get
			{
				return this.GetTable<Developer>();
			}
		}
		
		public System.Data.Linq.Table<IterationTask> IterationTasks
		{
			get
			{
				return this.GetTable<IterationTask>();
			}
		}
		
		public System.Data.Linq.Table<Project> Projects
		{
			get
			{
				return this.GetTable<Project>();
			}
		}
		
		public System.Data.Linq.Table<DeveloperIterationView> DeveloperIterationViews
		{
			get
			{
				return this.GetTable<DeveloperIterationView>();
			}
		}
		
		public System.Data.Linq.Table<DeveloperIterationTasksView> DeveloperIterationTasksViews
		{
			get
			{
				return this.GetTable<DeveloperIterationTasksView>();
			}
		}
		
		public System.Data.Linq.Table<Task> Tasks
		{
			get
			{
				return this.GetTable<Task>();
			}
		}
		
		public System.Data.Linq.Table<Iteration> Iterations
		{
			get
			{
				return this.GetTable<Iteration>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Clients")]
	public partial class Client : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _FamilyName;
		
		private string _GivenNames;
		
		private string _ABN;
		
		private string _ContactNumber;
		
		private string _Email;
		
		private System.Nullable<System.DateTime> _Created;
		
		private EntitySet<Project> _Projects;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFamilyNameChanging(string value);
    partial void OnFamilyNameChanged();
    partial void OnGivenNamesChanging(string value);
    partial void OnGivenNamesChanged();
    partial void OnABNChanging(string value);
    partial void OnABNChanged();
    partial void OnContactNumberChanging(string value);
    partial void OnContactNumberChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    #endregion
		
		public Client()
		{
			this._Projects = new EntitySet<Project>(new Action<Project>(this.attach_Projects), new Action<Project>(this.detach_Projects));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FamilyName", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string FamilyName
		{
			get
			{
				return this._FamilyName;
			}
			set
			{
				if ((this._FamilyName != value))
				{
					this.OnFamilyNameChanging(value);
					this.SendPropertyChanging();
					this._FamilyName = value;
					this.SendPropertyChanged("FamilyName");
					this.OnFamilyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GivenNames", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string GivenNames
		{
			get
			{
				return this._GivenNames;
			}
			set
			{
				if ((this._GivenNames != value))
				{
					this.OnGivenNamesChanging(value);
					this.SendPropertyChanging();
					this._GivenNames = value;
					this.SendPropertyChanged("GivenNames");
					this.OnGivenNamesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ABN", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string ABN
		{
			get
			{
				return this._ABN;
			}
			set
			{
				if ((this._ABN != value))
				{
					this.OnABNChanging(value);
					this.SendPropertyChanging();
					this._ABN = value;
					this.SendPropertyChanged("ABN");
					this.OnABNChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactNumber", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string ContactNumber
		{
			get
			{
				return this._ContactNumber;
			}
			set
			{
				if ((this._ContactNumber != value))
				{
					this.OnContactNumberChanging(value);
					this.SendPropertyChanging();
					this._ContactNumber = value;
					this.SendPropertyChanged("ContactNumber");
					this.OnContactNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Project", Storage="_Projects", ThisKey="ID", OtherKey="ClientID")]
		public EntitySet<Project> Projects
		{
			get
			{
				return this._Projects;
			}
			set
			{
				this._Projects.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.Client = this;
		}
		
		private void detach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.Client = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DeveloperIterationTasks")]
	public partial class DeveloperIterationTask : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DeveloperID;
		
		private int _TaskID;
		
		private int _IterationID;
		
		private EntityRef<Developer> _Developer;
		
		private EntityRef<Task> _Task;
		
		private EntityRef<Iteration> _Iteration;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDeveloperIDChanging(int value);
    partial void OnDeveloperIDChanged();
    partial void OnTaskIDChanging(int value);
    partial void OnTaskIDChanged();
    partial void OnIterationIDChanging(int value);
    partial void OnIterationIDChanged();
    #endregion
		
		public DeveloperIterationTask()
		{
			this._Developer = default(EntityRef<Developer>);
			this._Task = default(EntityRef<Task>);
			this._Iteration = default(EntityRef<Iteration>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeveloperID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DeveloperID
		{
			get
			{
				return this._DeveloperID;
			}
			set
			{
				if ((this._DeveloperID != value))
				{
					if (this._Developer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDeveloperIDChanging(value);
					this.SendPropertyChanging();
					this._DeveloperID = value;
					this.SendPropertyChanged("DeveloperID");
					this.OnDeveloperIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TaskID
		{
			get
			{
				return this._TaskID;
			}
			set
			{
				if ((this._TaskID != value))
				{
					if (this._Task.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskIDChanging(value);
					this.SendPropertyChanging();
					this._TaskID = value;
					this.SendPropertyChanged("TaskID");
					this.OnTaskIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IterationID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IterationID
		{
			get
			{
				return this._IterationID;
			}
			set
			{
				if ((this._IterationID != value))
				{
					if (this._Iteration.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIterationIDChanging(value);
					this.SendPropertyChanging();
					this._IterationID = value;
					this.SendPropertyChanged("IterationID");
					this.OnIterationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Developer_DeveloperIterationTask", Storage="_Developer", ThisKey="DeveloperID", OtherKey="ID", IsForeignKey=true)]
		public Developer Developer
		{
			get
			{
				return this._Developer.Entity;
			}
			set
			{
				Developer previousValue = this._Developer.Entity;
				if (((previousValue != value) 
							|| (this._Developer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Developer.Entity = null;
						previousValue.DeveloperIterationTasks.Remove(this);
					}
					this._Developer.Entity = value;
					if ((value != null))
					{
						value.DeveloperIterationTasks.Add(this);
						this._DeveloperID = value.ID;
					}
					else
					{
						this._DeveloperID = default(int);
					}
					this.SendPropertyChanged("Developer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task1_DeveloperIterationTask", Storage="_Task", ThisKey="TaskID", OtherKey="ID", IsForeignKey=true)]
		public Task Task
		{
			get
			{
				return this._Task.Entity;
			}
			set
			{
				Task previousValue = this._Task.Entity;
				if (((previousValue != value) 
							|| (this._Task.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Task.Entity = null;
						previousValue.DeveloperIterationTasks.Remove(this);
					}
					this._Task.Entity = value;
					if ((value != null))
					{
						value.DeveloperIterationTasks.Add(this);
						this._TaskID = value.ID;
					}
					else
					{
						this._TaskID = default(int);
					}
					this.SendPropertyChanged("Task");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Iteration1_DeveloperIterationTask", Storage="_Iteration", ThisKey="IterationID", OtherKey="ID", IsForeignKey=true)]
		public Iteration Iteration
		{
			get
			{
				return this._Iteration.Entity;
			}
			set
			{
				Iteration previousValue = this._Iteration.Entity;
				if (((previousValue != value) 
							|| (this._Iteration.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Iteration.Entity = null;
						previousValue.DeveloperIterationTasks.Remove(this);
					}
					this._Iteration.Entity = value;
					if ((value != null))
					{
						value.DeveloperIterationTasks.Add(this);
						this._IterationID = value.ID;
					}
					else
					{
						this._IterationID = default(int);
					}
					this.SendPropertyChanged("Iteration");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Developers")]
	public partial class Developer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _FamilyName;
		
		private string _GivenNames;
		
		private string _Email;
		
		private string _ContactNumber;
		
		private bool _Active;
		
		private string _Notes;
		
		private EntitySet<DeveloperIterationTask> _DeveloperIterationTasks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFamilyNameChanging(string value);
    partial void OnFamilyNameChanged();
    partial void OnGivenNamesChanging(string value);
    partial void OnGivenNamesChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnContactNumberChanging(string value);
    partial void OnContactNumberChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    #endregion
		
		public Developer()
		{
			this._DeveloperIterationTasks = new EntitySet<DeveloperIterationTask>(new Action<DeveloperIterationTask>(this.attach_DeveloperIterationTasks), new Action<DeveloperIterationTask>(this.detach_DeveloperIterationTasks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FamilyName", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string FamilyName
		{
			get
			{
				return this._FamilyName;
			}
			set
			{
				if ((this._FamilyName != value))
				{
					this.OnFamilyNameChanging(value);
					this.SendPropertyChanging();
					this._FamilyName = value;
					this.SendPropertyChanged("FamilyName");
					this.OnFamilyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GivenNames", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string GivenNames
		{
			get
			{
				return this._GivenNames;
			}
			set
			{
				if ((this._GivenNames != value))
				{
					this.OnGivenNamesChanging(value);
					this.SendPropertyChanging();
					this._GivenNames = value;
					this.SendPropertyChanged("GivenNames");
					this.OnGivenNamesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactNumber", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ContactNumber
		{
			get
			{
				return this._ContactNumber;
			}
			set
			{
				if ((this._ContactNumber != value))
				{
					this.OnContactNumberChanging(value);
					this.SendPropertyChanging();
					this._ContactNumber = value;
					this.SendPropertyChanged("ContactNumber");
					this.OnContactNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Developer_DeveloperIterationTask", Storage="_DeveloperIterationTasks", ThisKey="ID", OtherKey="DeveloperID")]
		public EntitySet<DeveloperIterationTask> DeveloperIterationTasks
		{
			get
			{
				return this._DeveloperIterationTasks;
			}
			set
			{
				this._DeveloperIterationTasks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DeveloperIterationTasks(DeveloperIterationTask entity)
		{
			this.SendPropertyChanging();
			entity.Developer = this;
		}
		
		private void detach_DeveloperIterationTasks(DeveloperIterationTask entity)
		{
			this.SendPropertyChanging();
			entity.Developer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.IterationTasks")]
	public partial class IterationTask : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TaskID;
		
		private int _IterationID;
		
		private System.Nullable<System.DateTime> _PlannedStartDate;
		
		private System.Nullable<System.DateTime> _PlannedCompletionDate;
		
		private EntityRef<Task> _Task;
		
		private EntityRef<Iteration> _Iteration;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTaskIDChanging(int value);
    partial void OnTaskIDChanged();
    partial void OnIterationIDChanging(int value);
    partial void OnIterationIDChanged();
    partial void OnPlannedStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPlannedStartDateChanged();
    partial void OnPlannedCompletionDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPlannedCompletionDateChanged();
    #endregion
		
		public IterationTask()
		{
			this._Task = default(EntityRef<Task>);
			this._Iteration = default(EntityRef<Iteration>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TaskID
		{
			get
			{
				return this._TaskID;
			}
			set
			{
				if ((this._TaskID != value))
				{
					if (this._Task.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskIDChanging(value);
					this.SendPropertyChanging();
					this._TaskID = value;
					this.SendPropertyChanged("TaskID");
					this.OnTaskIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IterationID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IterationID
		{
			get
			{
				return this._IterationID;
			}
			set
			{
				if ((this._IterationID != value))
				{
					if (this._Iteration.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIterationIDChanging(value);
					this.SendPropertyChanging();
					this._IterationID = value;
					this.SendPropertyChanged("IterationID");
					this.OnIterationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlannedStartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> PlannedStartDate
		{
			get
			{
				return this._PlannedStartDate;
			}
			set
			{
				if ((this._PlannedStartDate != value))
				{
					this.OnPlannedStartDateChanging(value);
					this.SendPropertyChanging();
					this._PlannedStartDate = value;
					this.SendPropertyChanged("PlannedStartDate");
					this.OnPlannedStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlannedCompletionDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> PlannedCompletionDate
		{
			get
			{
				return this._PlannedCompletionDate;
			}
			set
			{
				if ((this._PlannedCompletionDate != value))
				{
					this.OnPlannedCompletionDateChanging(value);
					this.SendPropertyChanging();
					this._PlannedCompletionDate = value;
					this.SendPropertyChanged("PlannedCompletionDate");
					this.OnPlannedCompletionDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task1_IterationTask", Storage="_Task", ThisKey="TaskID", OtherKey="ID", IsForeignKey=true)]
		public Task Task
		{
			get
			{
				return this._Task.Entity;
			}
			set
			{
				Task previousValue = this._Task.Entity;
				if (((previousValue != value) 
							|| (this._Task.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Task.Entity = null;
						previousValue.IterationTasks.Remove(this);
					}
					this._Task.Entity = value;
					if ((value != null))
					{
						value.IterationTasks.Add(this);
						this._TaskID = value.ID;
					}
					else
					{
						this._TaskID = default(int);
					}
					this.SendPropertyChanged("Task");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Iteration1_IterationTask", Storage="_Iteration", ThisKey="IterationID", OtherKey="ID", IsForeignKey=true)]
		public Iteration Iteration
		{
			get
			{
				return this._Iteration.Entity;
			}
			set
			{
				Iteration previousValue = this._Iteration.Entity;
				if (((previousValue != value) 
							|| (this._Iteration.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Iteration.Entity = null;
						previousValue.IterationTasks.Remove(this);
					}
					this._Iteration.Entity = value;
					if ((value != null))
					{
						value.IterationTasks.Add(this);
						this._IterationID = value.ID;
					}
					else
					{
						this._IterationID = default(int);
					}
					this.SendPropertyChanged("Iteration");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Projects")]
	public partial class Project : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _ProjectName;
		
		private string _Description;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _CompletionDate;
		
		private string _Status;
		
		private int _ClientID;
		
		private EntitySet<Task> _Tasks;
		
		private EntitySet<Iteration> _Iterations;
		
		private EntityRef<Client> _Client;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnProjectNameChanging(string value);
    partial void OnProjectNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnCompletionDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCompletionDateChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnClientIDChanging(int value);
    partial void OnClientIDChanged();
    #endregion
		
		public Project()
		{
			this._Tasks = new EntitySet<Task>(new Action<Task>(this.attach_Tasks), new Action<Task>(this.detach_Tasks));
			this._Iterations = new EntitySet<Iteration>(new Action<Iteration>(this.attach_Iterations), new Action<Iteration>(this.detach_Iterations));
			this._Client = default(EntityRef<Client>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectName", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string ProjectName
		{
			get
			{
				return this._ProjectName;
			}
			set
			{
				if ((this._ProjectName != value))
				{
					this.OnProjectNameChanging(value);
					this.SendPropertyChanging();
					this._ProjectName = value;
					this.SendPropertyChanged("ProjectName");
					this.OnProjectNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompletionDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CompletionDate
		{
			get
			{
				return this._CompletionDate;
			}
			set
			{
				if ((this._CompletionDate != value))
				{
					this.OnCompletionDateChanging(value);
					this.SendPropertyChanging();
					this._CompletionDate = value;
					this.SendPropertyChanged("CompletionDate");
					this.OnCompletionDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Varchar(20)", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientID", DbType="Int NOT NULL")]
		public int ClientID
		{
			get
			{
				return this._ClientID;
			}
			set
			{
				if ((this._ClientID != value))
				{
					if (this._Client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientIDChanging(value);
					this.SendPropertyChanging();
					this._ClientID = value;
					this.SendPropertyChanged("ClientID");
					this.OnClientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Task1", Storage="_Tasks", ThisKey="ID", OtherKey="ProjectID")]
		public EntitySet<Task> Tasks
		{
			get
			{
				return this._Tasks;
			}
			set
			{
				this._Tasks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Iteration1", Storage="_Iterations", ThisKey="ID", OtherKey="ProjectID")]
		public EntitySet<Iteration> Iterations
		{
			get
			{
				return this._Iterations;
			}
			set
			{
				this._Iterations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Project", Storage="_Client", ThisKey="ClientID", OtherKey="ID", IsForeignKey=true)]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.Projects.Remove(this);
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.Projects.Add(this);
						this._ClientID = value.ID;
					}
					else
					{
						this._ClientID = default(int);
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
		
		private void attach_Iterations(Iteration entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_Iterations(Iteration entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DeveloperIterationView")]
	public partial class DeveloperIterationView
	{
		
		private int _DeveloperID;
		
		private int _IterationID;
		
		private int _ProjectID;
		
		private string _ProjectName;
		
		private System.DateTime _StartDate;
		
		private System.DateTime _EndDate;
		
		public DeveloperIterationView()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeveloperID", DbType="Int NOT NULL")]
		public int DeveloperID
		{
			get
			{
				return this._DeveloperID;
			}
			set
			{
				if ((this._DeveloperID != value))
				{
					this._DeveloperID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IterationID", DbType="Int NOT NULL")]
		public int IterationID
		{
			get
			{
				return this._IterationID;
			}
			set
			{
				if ((this._IterationID != value))
				{
					this._IterationID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int NOT NULL")]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					this._ProjectID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectName", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string ProjectName
		{
			get
			{
				return this._ProjectName;
			}
			set
			{
				if ((this._ProjectName != value))
				{
					this._ProjectName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="DateTime NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this._StartDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime NOT NULL")]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this._EndDate = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DeveloperIterationTasksView")]
	public partial class DeveloperIterationTasksView
	{
		
		private int _DeveloperID;
		
		private int _IterationID;
		
		private int _ID;
		
		private string _TaskName;
		
		private string _Description;
		
		private string _Priority;
		
		private System.Nullable<System.DateTime> _CompletionDate;
		
		private int _ProjectID;
		
		public DeveloperIterationTasksView()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeveloperID", DbType="Int NOT NULL")]
		public int DeveloperID
		{
			get
			{
				return this._DeveloperID;
			}
			set
			{
				if ((this._DeveloperID != value))
				{
					this._DeveloperID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IterationID", DbType="Int NOT NULL")]
		public int IterationID
		{
			get
			{
				return this._IterationID;
			}
			set
			{
				if ((this._IterationID != value))
				{
					this._IterationID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskName", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string TaskName
		{
			get
			{
				return this._TaskName;
			}
			set
			{
				if ((this._TaskName != value))
				{
					this._TaskName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Priority", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Priority
		{
			get
			{
				return this._Priority;
			}
			set
			{
				if ((this._Priority != value))
				{
					this._Priority = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompletionDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CompletionDate
		{
			get
			{
				return this._CompletionDate;
			}
			set
			{
				if ((this._CompletionDate != value))
				{
					this._CompletionDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int NOT NULL")]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					this._ProjectID = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tasks")]
	public partial class Task : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _TaskName;
		
		private string _Description;
		
		private string _Priority;
		
		private System.Nullable<System.DateTime> _CompletionDate;
		
		private int _ProjectID;
		
		private bool _Active;
		
		private EntitySet<DeveloperIterationTask> _DeveloperIterationTasks;
		
		private EntitySet<IterationTask> _IterationTasks;
		
		private EntityRef<Project> _Project;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTaskNameChanging(string value);
    partial void OnTaskNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnPriorityChanging(string value);
    partial void OnPriorityChanged();
    partial void OnCompletionDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCompletionDateChanged();
    partial void OnProjectIDChanging(int value);
    partial void OnProjectIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public Task()
		{
			this._DeveloperIterationTasks = new EntitySet<DeveloperIterationTask>(new Action<DeveloperIterationTask>(this.attach_DeveloperIterationTasks), new Action<DeveloperIterationTask>(this.detach_DeveloperIterationTasks));
			this._IterationTasks = new EntitySet<IterationTask>(new Action<IterationTask>(this.attach_IterationTasks), new Action<IterationTask>(this.detach_IterationTasks));
			this._Project = default(EntityRef<Project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskName", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string TaskName
		{
			get
			{
				return this._TaskName;
			}
			set
			{
				if ((this._TaskName != value))
				{
					this.OnTaskNameChanging(value);
					this.SendPropertyChanging();
					this._TaskName = value;
					this.SendPropertyChanged("TaskName");
					this.OnTaskNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Priority", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Priority
		{
			get
			{
				return this._Priority;
			}
			set
			{
				if ((this._Priority != value))
				{
					this.OnPriorityChanging(value);
					this.SendPropertyChanging();
					this._Priority = value;
					this.SendPropertyChanged("Priority");
					this.OnPriorityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompletionDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CompletionDate
		{
			get
			{
				return this._CompletionDate;
			}
			set
			{
				if ((this._CompletionDate != value))
				{
					this.OnCompletionDateChanging(value);
					this.SendPropertyChanging();
					this._CompletionDate = value;
					this.SendPropertyChanged("CompletionDate");
					this.OnCompletionDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int NOT NULL")]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task1_DeveloperIterationTask", Storage="_DeveloperIterationTasks", ThisKey="ID", OtherKey="TaskID")]
		public EntitySet<DeveloperIterationTask> DeveloperIterationTasks
		{
			get
			{
				return this._DeveloperIterationTasks;
			}
			set
			{
				this._DeveloperIterationTasks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task1_IterationTask", Storage="_IterationTasks", ThisKey="ID", OtherKey="TaskID")]
		public EntitySet<IterationTask> IterationTasks
		{
			get
			{
				return this._IterationTasks;
			}
			set
			{
				this._IterationTasks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Task1", Storage="_Project", ThisKey="ProjectID", OtherKey="ID", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.Tasks.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.Tasks.Add(this);
						this._ProjectID = value.ID;
					}
					else
					{
						this._ProjectID = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DeveloperIterationTasks(DeveloperIterationTask entity)
		{
			this.SendPropertyChanging();
			entity.Task = this;
		}
		
		private void detach_DeveloperIterationTasks(DeveloperIterationTask entity)
		{
			this.SendPropertyChanging();
			entity.Task = null;
		}
		
		private void attach_IterationTasks(IterationTask entity)
		{
			this.SendPropertyChanging();
			entity.Task = this;
		}
		
		private void detach_IterationTasks(IterationTask entity)
		{
			this.SendPropertyChanging();
			entity.Task = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Iterations")]
	public partial class Iteration : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.DateTime _StartDate;
		
		private System.DateTime _EndDate;
		
		private int _ProjectID;
		
		private bool _Active;
		
		private EntitySet<DeveloperIterationTask> _DeveloperIterationTasks;
		
		private EntitySet<IterationTask> _IterationTasks;
		
		private EntityRef<Project> _Project;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnProjectIDChanging(int value);
    partial void OnProjectIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public Iteration()
		{
			this._DeveloperIterationTasks = new EntitySet<DeveloperIterationTask>(new Action<DeveloperIterationTask>(this.attach_DeveloperIterationTasks), new Action<DeveloperIterationTask>(this.detach_DeveloperIterationTasks));
			this._IterationTasks = new EntitySet<IterationTask>(new Action<IterationTask>(this.attach_IterationTasks), new Action<IterationTask>(this.detach_IterationTasks));
			this._Project = default(EntityRef<Project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="DateTime NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime NOT NULL")]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int NOT NULL")]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Iteration1_DeveloperIterationTask", Storage="_DeveloperIterationTasks", ThisKey="ID", OtherKey="IterationID")]
		public EntitySet<DeveloperIterationTask> DeveloperIterationTasks
		{
			get
			{
				return this._DeveloperIterationTasks;
			}
			set
			{
				this._DeveloperIterationTasks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Iteration1_IterationTask", Storage="_IterationTasks", ThisKey="ID", OtherKey="IterationID")]
		public EntitySet<IterationTask> IterationTasks
		{
			get
			{
				return this._IterationTasks;
			}
			set
			{
				this._IterationTasks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Iteration1", Storage="_Project", ThisKey="ProjectID", OtherKey="ID", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.Iterations.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.Iterations.Add(this);
						this._ProjectID = value.ID;
					}
					else
					{
						this._ProjectID = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DeveloperIterationTasks(DeveloperIterationTask entity)
		{
			this.SendPropertyChanging();
			entity.Iteration = this;
		}
		
		private void detach_DeveloperIterationTasks(DeveloperIterationTask entity)
		{
			this.SendPropertyChanging();
			entity.Iteration = null;
		}
		
		private void attach_IterationTasks(IterationTask entity)
		{
			this.SendPropertyChanging();
			entity.Iteration = this;
		}
		
		private void detach_IterationTasks(IterationTask entity)
		{
			this.SendPropertyChanging();
			entity.Iteration = null;
		}
	}
}
#pragma warning restore 1591
